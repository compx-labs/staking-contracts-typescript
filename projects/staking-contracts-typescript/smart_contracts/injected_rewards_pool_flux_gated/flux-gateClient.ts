/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"flux-gate","structs":{"FluxRecord":[{"name":"tier","type":"uint64"}],"FluxRecordKey":[{"name":"userAddress","type":"address"}]},"methods":[{"name":"createApplication","args":[{"type":"account","name":"admin"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}},{"name":"initApplication","args":[{"type":"pay","name":"mbrTxn"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"addFluxTier","args":[{"type":"uint64","name":"tierNumber"},{"type":"uint64","name":"minRequired"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"removeFluxTier","args":[{"type":"uint64","name":"tierNumber"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"setUserTier","args":[{"type":"address","name":"user"},{"type":"uint64","name":"tier"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getUserTier","args":[{"type":"address","name":"user"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":1,"bytes":1},"local":{"ints":0,"bytes":0}},"keys":{"global":{"admin_account":{"keyType":"AVMString","valueType":"address","key":"YWRtaW5fYWNjb3VudA=="},"current_num_tiers":{"keyType":"AVMString","valueType":"AVMUint64","key":"Y3VycmVudF9udW1fdGllcnM="}},"local":{},"box":{"flux_tiers":{"keyType":"AVMString","valueType":"(uint64,uint64)[10]","key":"ZnQ="}}},"maps":{"global":{},"local":{},"box":{"flux_records":{"keyType":"FluxRecordKey","valueType":"FluxRecord","prefix":"Zmx1eF9yZWNvcmQ="}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[299,338,401],"errorMessage":"Box must have value"},{"pc":[304,343,402],"errorMessage":"Index access is out of bounds"},{"pc":[115,139,158,174,193,215],"errorMessage":"OnCompletion is not NoOp"},{"pc":[265],"errorMessage":"assert target is match for conditions"},{"pc":[219],"errorMessage":"can only call when creating"},{"pc":[118,142,161,177,196],"errorMessage":"can only call when not creating"},{"pc":[288,318,333,373],"errorMessage":"check GlobalState exists"},{"pc":[206],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CyAEAQAKECYEAmZ0EWN1cnJlbnRfbnVtX3RpZXJzDWFkbWluX2FjY291bnQLZmx1eF9yZWNvcmQxG0EAMYIGBNpT/v4E+Sep9gRbR7GOBGyKAxgEoH0AzwTU16pcNhoAjgYAZgBQAD0ALQAaAAIjQzEZFEQxGEQ2GgGIAQyABBUffHVMULAiQzEZFEQxGEQ2GgE2GgIXiADjIkMxGRREMRhENhoBF4gAnCJDMRkURDEYRDYaARc2GgKIAFwiQzEZFEQxGEQxFiIJSTgQIhJEiAAdIkMxGRREMRgURDYaARfAHIgAAiJDigEAKov/Z4mKAQCL/zgHMgoSQQAYi/84CIGAtRgSQQAMIkQogaABuUgpI2eJI0L/8YoCADEAIyplRBJEi/4Wi/9QKL5Ei/4kDESL/iULTwJdKEy/IyllRCIIKUxniYoBADEAIyplRBJEKL5Ei/8kDESL/yULgBAAAAAAAAAAAAAAAAAAAAAAXShMvyMpZUQiCSlMZ4mKAgCL/xYri/5QTL+JigEBK4v/UL5EVwAIiQ==","clear":"C4EBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type FluxRecord = {
  tier: bigint
}


/**
 * Converts the ABI tuple representation of a FluxRecord to the struct representation
 */
export function FluxRecordFromTuple(abiTuple: [bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.FluxRecord, APP_SPEC.structs) as FluxRecord
}

export type FluxRecordKey = {
  userAddress: string
}


/**
 * Converts the ABI tuple representation of a FluxRecordKey to the struct representation
 */
export function FluxRecordKeyFromTuple(abiTuple: [string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.FluxRecordKey, APP_SPEC.structs) as FluxRecordKey
}

/**
 * The argument types for the FluxGate contract
 */
export type FluxGateArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(account)void': {
      admin: Uint8Array | string
    }
    'initApplication(pay)void': {
      mbrTxn: AppMethodCallTransactionArgument
    }
    'addFluxTier(uint64,uint64)void': {
      tierNumber: bigint | number
      minRequired: bigint | number
    }
    'removeFluxTier(uint64)void': {
      tierNumber: bigint | number
    }
    'setUserTier(address,uint64)void': {
      user: string
      tier: bigint | number
    }
    'getUserTier(address)uint64': {
      user: string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(account)void': [admin: Uint8Array | string]
    'initApplication(pay)void': [mbrTxn: AppMethodCallTransactionArgument]
    'addFluxTier(uint64,uint64)void': [tierNumber: bigint | number, minRequired: bigint | number]
    'removeFluxTier(uint64)void': [tierNumber: bigint | number]
    'setUserTier(address,uint64)void': [user: string, tier: bigint | number]
    'getUserTier(address)uint64': [user: string]
  }
}

/**
 * The return type for each method
 */
export type FluxGateReturns = {
  'createApplication(account)void': void
  'initApplication(pay)void': void
  'addFluxTier(uint64,uint64)void': void
  'removeFluxTier(uint64)void': void
  'setUserTier(address,uint64)void': void
  'getUserTier(address)uint64': bigint
}

/**
 * Defines the types of available calls and state of the FluxGate smart contract.
 */
export type FluxGateTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(account)void' | 'createApplication', {
      argsObj: FluxGateArgs['obj']['createApplication(account)void']
      argsTuple: FluxGateArgs['tuple']['createApplication(account)void']
      returns: FluxGateReturns['createApplication(account)void']
    }>
    & Record<'initApplication(pay)void' | 'initApplication', {
      argsObj: FluxGateArgs['obj']['initApplication(pay)void']
      argsTuple: FluxGateArgs['tuple']['initApplication(pay)void']
      returns: FluxGateReturns['initApplication(pay)void']
    }>
    & Record<'addFluxTier(uint64,uint64)void' | 'addFluxTier', {
      argsObj: FluxGateArgs['obj']['addFluxTier(uint64,uint64)void']
      argsTuple: FluxGateArgs['tuple']['addFluxTier(uint64,uint64)void']
      returns: FluxGateReturns['addFluxTier(uint64,uint64)void']
    }>
    & Record<'removeFluxTier(uint64)void' | 'removeFluxTier', {
      argsObj: FluxGateArgs['obj']['removeFluxTier(uint64)void']
      argsTuple: FluxGateArgs['tuple']['removeFluxTier(uint64)void']
      returns: FluxGateReturns['removeFluxTier(uint64)void']
    }>
    & Record<'setUserTier(address,uint64)void' | 'setUserTier', {
      argsObj: FluxGateArgs['obj']['setUserTier(address,uint64)void']
      argsTuple: FluxGateArgs['tuple']['setUserTier(address,uint64)void']
      returns: FluxGateReturns['setUserTier(address,uint64)void']
    }>
    & Record<'getUserTier(address)uint64' | 'getUserTier', {
      argsObj: FluxGateArgs['obj']['getUserTier(address)uint64']
      argsTuple: FluxGateArgs['tuple']['getUserTier(address)uint64']
      returns: FluxGateReturns['getUserTier(address)uint64']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        adminAccount: string
        currentNumTiers: bigint
      }
      maps: {}
    }
    box: {
      keys: {
        fluxTiers: [[bigint, bigint], [bigint, bigint], [bigint, bigint], [bigint, bigint], [bigint, bigint], [bigint, bigint], [bigint, bigint], [bigint, bigint], [bigint, bigint], [bigint, bigint]]
      }
      maps: {
        fluxRecords: Map<FluxRecordKey, FluxRecord>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type FluxGateSignatures = keyof FluxGateTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type FluxGateNonVoidMethodSignatures = keyof FluxGateTypes['methods'] extends infer T ? T extends keyof FluxGateTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the FluxGate smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends FluxGateSignatures> = FluxGateTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the FluxGate smart contract to the method's return type
 */
export type MethodReturn<TSignature extends FluxGateSignatures> = FluxGateTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = FluxGateTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = FluxGateTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type FluxGateCreateCallParams =
  | Expand<CallParams<FluxGateArgs['obj']['createApplication(account)void'] | FluxGateArgs['tuple']['createApplication(account)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<FluxGateArgs['obj']['createApplication(account)void'] | FluxGateArgs['tuple']['createApplication(account)void']> & {method: 'createApplication(account)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type FluxGateDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: FluxGateCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the FluxGate smart contract
 */
export abstract class FluxGateParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends FluxGateCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(account)void':
            return FluxGateParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the flux-gate smart contract using the createApplication(account)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<FluxGateArgs['obj']['createApplication(account)void'] | FluxGateArgs['tuple']['createApplication(account)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(account)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.admin],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the initApplication(pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initApplication(params: CallParams<FluxGateArgs['obj']['initApplication(pay)void'] | FluxGateArgs['tuple']['initApplication(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initApplication(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.mbrTxn],
    }
  }
  /**
   * Constructs a no op call for the addFluxTier(uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addFluxTier(params: CallParams<FluxGateArgs['obj']['addFluxTier(uint64,uint64)void'] | FluxGateArgs['tuple']['addFluxTier(uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addFluxTier(uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.tierNumber, params.args.minRequired],
    }
  }
  /**
   * Constructs a no op call for the removeFluxTier(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static removeFluxTier(params: CallParams<FluxGateArgs['obj']['removeFluxTier(uint64)void'] | FluxGateArgs['tuple']['removeFluxTier(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'removeFluxTier(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.tierNumber],
    }
  }
  /**
   * Constructs a no op call for the setUserTier(address,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setUserTier(params: CallParams<FluxGateArgs['obj']['setUserTier(address,uint64)void'] | FluxGateArgs['tuple']['setUserTier(address,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setUserTier(address,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.user, params.args.tier],
    }
  }
  /**
   * Constructs a no op call for the getUserTier(address)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getUserTier(params: CallParams<FluxGateArgs['obj']['getUserTier(address)uint64'] | FluxGateArgs['tuple']['getUserTier(address)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getUserTier(address)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.user],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the flux-gate smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class FluxGateFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `FluxGateFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }

  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }

  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }

  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }

  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new FluxGateClient(this.appFactory.getAppClientById(params))
  }

  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new FluxGateClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the flux-gate smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: FluxGateDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? FluxGateParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (FluxGateCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new FluxGateClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the flux-gate smart contract using the createApplication(account)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<FluxGateArgs['obj']['createApplication(account)void'] | FluxGateArgs['tuple']['createApplication(account)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(FluxGateParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the flux-gate smart contract using the createApplication(account)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<FluxGateArgs['obj']['createApplication(account)void'] | FluxGateArgs['tuple']['createApplication(account)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(FluxGateParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the flux-gate smart contract using an ABI method call using the createApplication(account)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<FluxGateArgs['obj']['createApplication(account)void'] | FluxGateArgs['tuple']['createApplication(account)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(FluxGateParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | FluxGateReturns['createApplication(account)void']) }, appClient: new FluxGateClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the flux-gate smart contract
 */
export class FluxGateClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `FluxGateClient`
   *
   * @param appClient An `AppClient` instance which has been created with the FluxGate app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `FluxGateClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }

  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends FluxGateNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }

  /**
   * Returns a new `FluxGateClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<FluxGateClient> {
    return new FluxGateClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }

  /**
   * Returns an `FluxGateClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<FluxGateClient> {
    return new FluxGateClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }

  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }

  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }

  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }

  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }

  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the flux-gate smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the flux-gate smart contract using the `initApplication(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initApplication: (params: CallParams<FluxGateArgs['obj']['initApplication(pay)void'] | FluxGateArgs['tuple']['initApplication(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FluxGateParamsFactory.initApplication(params))
    },

    /**
     * Makes a call to the flux-gate smart contract using the `addFluxTier(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addFluxTier: (params: CallParams<FluxGateArgs['obj']['addFluxTier(uint64,uint64)void'] | FluxGateArgs['tuple']['addFluxTier(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FluxGateParamsFactory.addFluxTier(params))
    },

    /**
     * Makes a call to the flux-gate smart contract using the `removeFluxTier(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    removeFluxTier: (params: CallParams<FluxGateArgs['obj']['removeFluxTier(uint64)void'] | FluxGateArgs['tuple']['removeFluxTier(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FluxGateParamsFactory.removeFluxTier(params))
    },

    /**
     * Makes a call to the flux-gate smart contract using the `setUserTier(address,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setUserTier: (params: CallParams<FluxGateArgs['obj']['setUserTier(address,uint64)void'] | FluxGateArgs['tuple']['setUserTier(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FluxGateParamsFactory.setUserTier(params))
    },

    /**
     * Makes a call to the flux-gate smart contract using the `getUserTier(address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getUserTier: (params: CallParams<FluxGateArgs['obj']['getUserTier(address)uint64'] | FluxGateArgs['tuple']['getUserTier(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FluxGateParamsFactory.getUserTier(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the flux-gate smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the flux-gate smart contract using the `initApplication(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initApplication: (params: CallParams<FluxGateArgs['obj']['initApplication(pay)void'] | FluxGateArgs['tuple']['initApplication(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FluxGateParamsFactory.initApplication(params))
    },

    /**
     * Makes a call to the flux-gate smart contract using the `addFluxTier(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addFluxTier: (params: CallParams<FluxGateArgs['obj']['addFluxTier(uint64,uint64)void'] | FluxGateArgs['tuple']['addFluxTier(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FluxGateParamsFactory.addFluxTier(params))
    },

    /**
     * Makes a call to the flux-gate smart contract using the `removeFluxTier(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    removeFluxTier: (params: CallParams<FluxGateArgs['obj']['removeFluxTier(uint64)void'] | FluxGateArgs['tuple']['removeFluxTier(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FluxGateParamsFactory.removeFluxTier(params))
    },

    /**
     * Makes a call to the flux-gate smart contract using the `setUserTier(address,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setUserTier: (params: CallParams<FluxGateArgs['obj']['setUserTier(address,uint64)void'] | FluxGateArgs['tuple']['setUserTier(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FluxGateParamsFactory.setUserTier(params))
    },

    /**
     * Makes a call to the flux-gate smart contract using the `getUserTier(address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getUserTier: (params: CallParams<FluxGateArgs['obj']['getUserTier(address)uint64'] | FluxGateArgs['tuple']['getUserTier(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FluxGateParamsFactory.getUserTier(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the flux-gate smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the flux-gate smart contract using the `initApplication(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initApplication: async (params: CallParams<FluxGateArgs['obj']['initApplication(pay)void'] | FluxGateArgs['tuple']['initApplication(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FluxGateParamsFactory.initApplication(params))
      return {...result, return: result.return as unknown as (undefined | FluxGateReturns['initApplication(pay)void'])}
    },

    /**
     * Makes a call to the flux-gate smart contract using the `addFluxTier(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addFluxTier: async (params: CallParams<FluxGateArgs['obj']['addFluxTier(uint64,uint64)void'] | FluxGateArgs['tuple']['addFluxTier(uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FluxGateParamsFactory.addFluxTier(params))
      return {...result, return: result.return as unknown as (undefined | FluxGateReturns['addFluxTier(uint64,uint64)void'])}
    },

    /**
     * Makes a call to the flux-gate smart contract using the `removeFluxTier(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    removeFluxTier: async (params: CallParams<FluxGateArgs['obj']['removeFluxTier(uint64)void'] | FluxGateArgs['tuple']['removeFluxTier(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FluxGateParamsFactory.removeFluxTier(params))
      return {...result, return: result.return as unknown as (undefined | FluxGateReturns['removeFluxTier(uint64)void'])}
    },

    /**
     * Makes a call to the flux-gate smart contract using the `setUserTier(address,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setUserTier: async (params: CallParams<FluxGateArgs['obj']['setUserTier(address,uint64)void'] | FluxGateArgs['tuple']['setUserTier(address,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FluxGateParamsFactory.setUserTier(params))
      return {...result, return: result.return as unknown as (undefined | FluxGateReturns['setUserTier(address,uint64)void'])}
    },

    /**
     * Makes a call to the flux-gate smart contract using the `getUserTier(address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getUserTier: async (params: CallParams<FluxGateArgs['obj']['getUserTier(address)uint64'] | FluxGateArgs['tuple']['getUserTier(address)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FluxGateParamsFactory.getUserTier(params))
      return {...result, return: result.return as unknown as (undefined | FluxGateReturns['getUserTier(address)uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new FluxGateClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current flux-gate app
   */
  state = {
    /**
     * Methods to access global state for the current flux-gate app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          adminAccount: result.admin_account,
          currentNumTiers: result.current_num_tiers,
        }
      },
      /**
       * Get the current value of the admin_account key in global state
       */
      adminAccount: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("admin_account")) as string | undefined },
      /**
       * Get the current value of the current_num_tiers key in global state
       */
      currentNumTiers: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("current_num_tiers")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current flux-gate app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
          fluxTiers: result.flux_tiers,
        }
      },
      /**
       * Get the current value of the flux_tiers key in box state
       */
      fluxTiers: async (): Promise<[[bigint, bigint], [bigint, bigint], [bigint, bigint], [bigint, bigint], [bigint, bigint], [bigint, bigint], [bigint, bigint], [bigint, bigint], [bigint, bigint], [bigint, bigint]] | undefined> => { return (await this.appClient.state.box.getValue("flux_tiers")) as [[bigint, bigint], [bigint, bigint], [bigint, bigint], [bigint, bigint], [bigint, bigint], [bigint, bigint], [bigint, bigint], [bigint, bigint], [bigint, bigint], [bigint, bigint]] | undefined },
      /**
       * Get values from the flux_records map in box state
       */
      fluxRecords: {
        /**
         * Get all current values of the flux_records map in box state
         */
        getMap: async (): Promise<Map<FluxRecordKey, FluxRecord>> => { return (await this.appClient.state.box.getMap("flux_records")) as Map<FluxRecordKey, FluxRecord> },
        /**
         * Get a current value of the flux_records map by key from box state
         */
        value: async (key: FluxRecordKey): Promise<FluxRecord | undefined> => { return await this.appClient.state.box.getMapValue("flux_records", key) as FluxRecord | undefined },
      },
    },
  }

  public newGroup(): FluxGateComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a initApplication(pay)void method call against the flux-gate contract
       */
      initApplication(params: CallParams<FluxGateArgs['obj']['initApplication(pay)void'] | FluxGateArgs['tuple']['initApplication(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initApplication(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a addFluxTier(uint64,uint64)void method call against the flux-gate contract
       */
      addFluxTier(params: CallParams<FluxGateArgs['obj']['addFluxTier(uint64,uint64)void'] | FluxGateArgs['tuple']['addFluxTier(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addFluxTier(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a removeFluxTier(uint64)void method call against the flux-gate contract
       */
      removeFluxTier(params: CallParams<FluxGateArgs['obj']['removeFluxTier(uint64)void'] | FluxGateArgs['tuple']['removeFluxTier(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.removeFluxTier(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a setUserTier(address,uint64)void method call against the flux-gate contract
       */
      setUserTier(params: CallParams<FluxGateArgs['obj']['setUserTier(address,uint64)void'] | FluxGateArgs['tuple']['setUserTier(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setUserTier(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getUserTier(address)uint64 method call against the flux-gate contract
       */
      getUserTier(params: CallParams<FluxGateArgs['obj']['getUserTier(address)uint64'] | FluxGateArgs['tuple']['getUserTier(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getUserTier(params)))
        resultMappers.push((v) => client.decodeReturnValue('getUserTier(address)uint64', v))
        return this
      },
      /**
       * Add a clear state call to the flux-gate contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as FluxGateComposer
  }
}
export type FluxGateComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the initApplication(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initApplication(params?: CallParams<FluxGateArgs['obj']['initApplication(pay)void'] | FluxGateArgs['tuple']['initApplication(pay)void']>): FluxGateComposer<[...TReturns, FluxGateReturns['initApplication(pay)void'] | undefined]>

  /**
   * Calls the addFluxTier(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addFluxTier(params?: CallParams<FluxGateArgs['obj']['addFluxTier(uint64,uint64)void'] | FluxGateArgs['tuple']['addFluxTier(uint64,uint64)void']>): FluxGateComposer<[...TReturns, FluxGateReturns['addFluxTier(uint64,uint64)void'] | undefined]>

  /**
   * Calls the removeFluxTier(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeFluxTier(params?: CallParams<FluxGateArgs['obj']['removeFluxTier(uint64)void'] | FluxGateArgs['tuple']['removeFluxTier(uint64)void']>): FluxGateComposer<[...TReturns, FluxGateReturns['removeFluxTier(uint64)void'] | undefined]>

  /**
   * Calls the setUserTier(address,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setUserTier(params?: CallParams<FluxGateArgs['obj']['setUserTier(address,uint64)void'] | FluxGateArgs['tuple']['setUserTier(address,uint64)void']>): FluxGateComposer<[...TReturns, FluxGateReturns['setUserTier(address,uint64)void'] | undefined]>

  /**
   * Calls the getUserTier(address)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getUserTier(params?: CallParams<FluxGateArgs['obj']['getUserTier(address)uint64'] | FluxGateArgs['tuple']['getUserTier(address)uint64']>): FluxGateComposer<[...TReturns, FluxGateReturns['getUserTier(address)uint64'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the flux-gate smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): FluxGateComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): FluxGateComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<FluxGateComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<FluxGateComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<FluxGateComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<FluxGateComposerResults<TReturns>>
}
export type FluxGateComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

