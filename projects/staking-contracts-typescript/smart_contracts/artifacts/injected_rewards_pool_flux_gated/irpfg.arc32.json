{
    "hints": {
        "createApplication(address)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "initApplication(uint64,uint64,pay,uint64,application)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "updateAdminAddress(account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "injectRewards(axfer,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "deleteApplication()void": {
            "call_config": {
                "delete_application": "CALL"
            }
        },
        "stake(axfer,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "claimRewards()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "unstake(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "gas()void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 9,
            "num_uints": 1
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "admin_address": {
                    "type": "bytes",
                    "key": "admin_address"
                },
                "contract_version": {
                    "type": "bytes",
                    "key": "contract_version"
                },
                "current_asa_reward_index": {
                    "type": "bytes",
                    "key": "current_asa_reward_index"
                },
                "flux_oracle_app": {
                    "type": "uint64",
                    "key": "flux_oracle_app"
                },
                "flux_tier_required": {
                    "type": "bytes",
                    "key": "flux_tier_required"
                },
                "last_reward_injection_time": {
                    "type": "bytes",
                    "key": "last_reward_injection_time"
                },
                "num_stakers": {
                    "type": "bytes",
                    "key": "num_stakers"
                },
                "reward_asset_id": {
                    "type": "bytes",
                    "key": "reward_asset_id"
                },
                "staked_asset_id": {
                    "type": "bytes",
                    "key": "staked_asset_id"
                },
                "total_staked": {
                    "type": "bytes",
                    "key": "total_staked"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "irpfg",
        "methods": [
            {
                "name": "createApplication",
                "args": [
                    {
                        "type": "address",
                        "name": "adminAddress"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "initApplication",
                "args": [
                    {
                        "type": "uint64",
                        "name": "stakedAssetId",
                        "desc": "- The asset ID of the token to be staked in the pool."
                    },
                    {
                        "type": "uint64",
                        "name": "rewardAssetId",
                        "desc": "- The asset ID of the token to be distributed as rewards."
                    },
                    {
                        "type": "pay",
                        "name": "initialBalanceTxn",
                        "desc": "- The payment transaction providing the initial minimum balance for the contract."
                    },
                    {
                        "type": "uint64",
                        "name": "fluxTierRequired"
                    },
                    {
                        "type": "application",
                        "name": "fluxOracleApp"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Initializes the staking pool application with the specified staked asset and reward asset.\n\nSets up global state variables, verifies the initial funding payment, and opts the contract into the staked asset\nand reward asset if necesary.\nOnly the admin address can call this function."
            },
            {
                "name": "updateAdminAddress",
                "args": [
                    {
                        "type": "account",
                        "name": "adminAddress"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "injectRewards",
                "args": [
                    {
                        "type": "axfer",
                        "name": "rewardTxn"
                    },
                    {
                        "type": "uint64",
                        "name": "quantity"
                    },
                    {
                        "type": "uint64",
                        "name": "rewardAssetId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "deleteApplication",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "stake",
                "args": [
                    {
                        "type": "axfer",
                        "name": "stakeTxn"
                    },
                    {
                        "type": "uint64",
                        "name": "quantity"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "claimRewards",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "unstake",
                "args": [
                    {
                        "type": "uint64",
                        "name": "quantity"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "gas",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}