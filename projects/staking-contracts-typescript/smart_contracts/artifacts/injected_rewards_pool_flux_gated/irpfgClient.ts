/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"irpfg","structs":{"mbrReturn":[{"name":"mbrPayment","type":"uint64"}]},"methods":[{"name":"createApplication","args":[{"type":"address","name":"adminAddress"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}},{"name":"initApplication","args":[{"type":"uint64","name":"stakedAssetId","desc":"- The asset ID of the token to be staked in the pool."},{"type":"uint64","name":"rewardAssetId","desc":"- The asset ID of the token to be distributed as rewards."},{"type":"pay","name":"initialBalanceTxn","desc":"- The payment transaction providing the initial minimum balance for the contract."},{"type":"uint64","name":"fluxTierRequired"},{"type":"application","name":"fluxOracleApp"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Initializes the staking pool application with the specified staked asset and reward asset.\n\nSets up global state variables, verifies the initial funding payment, and opts the contract into the staked asset\nand reward asset if necesary.\nOnly the admin address can call this function.","events":[],"recommendations":{}},{"name":"updateAdminAddress","args":[{"type":"account","name":"adminAddress"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getMBRForPoolCreation","args":[],"returns":{"type":"(uint64)","struct":"mbrReturn"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"initStorage","args":[{"type":"pay","name":"mbrPayment"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"injectRewards","args":[{"type":"axfer","name":"rewardTxn"},{"type":"uint64","name":"quantity"},{"type":"uint64","name":"rewardAssetId"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"deleteApplication","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["DeleteApplication"]},"readonly":false,"events":[],"recommendations":{}},{"name":"stake","args":[{"type":"axfer","name":"stakeTxn"},{"type":"uint64","name":"quantity"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"accrueRewards","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"claimRewards","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"unstake","args":[{"type":"uint64","name":"quantity"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"gas","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":1,"bytes":11},"local":{"ints":0,"bytes":0}},"keys":{"global":{"staked_asset_id":{"keyType":"AVMString","valueType":"uint64","key":"c3Rha2VkX2Fzc2V0X2lk"},"reward_asset_id":{"keyType":"AVMString","valueType":"uint64","key":"cmV3YXJkX2Fzc2V0X2lk"},"total_staked":{"keyType":"AVMString","valueType":"uint64","key":"dG90YWxfc3Rha2Vk"},"injected_asa_rewards":{"keyType":"AVMString","valueType":"uint64","key":"aW5qZWN0ZWRfYXNhX3Jld2FyZHM="},"last_reward_injection_time":{"keyType":"AVMString","valueType":"uint64","key":"bGFzdF9yZXdhcmRfaW5qZWN0aW9uX3RpbWU="},"last_accrual_time":{"keyType":"AVMString","valueType":"uint64","key":"bGFzdF9hY2NydWFsX3RpbWU="},"admin_address":{"keyType":"AVMString","valueType":"address","key":"YWRtaW5fYWRkcmVzcw=="},"minimum_balance":{"keyType":"AVMString","valueType":"uint64","key":"bWluaW11bV9iYWxhbmNl"},"num_stakers":{"keyType":"AVMString","valueType":"uint64","key":"bnVtX3N0YWtlcnM="},"contract_version":{"keyType":"AVMString","valueType":"uint64","key":"Y29udHJhY3RfdmVyc2lvbg=="},"flux_tier_required":{"keyType":"AVMString","valueType":"uint8","key":"Zmx1eF90aWVyX3JlcXVpcmVk"},"flux_oracle_app":{"keyType":"AVMString","valueType":"AVMUint64","key":"Zmx1eF9vcmFjbGVfYXBw"}},"local":{},"box":{"stakers":{"keyType":"AVMString","valueType":"(address,uint64,uint64)[650]","key":"c3Rha2Vycw=="}}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[1329,1348,1385,1425,1479,1553,1684,1702,1840,2020,2041,2193,2387,2410,2437,2657,2678,2700,2716,2755],"errorMessage":"Box must have value"},{"pc":[1231],"errorMessage":"Bytes has valid prefix"},{"pc":[1357,1358,1389,1428,1483,1484,1556,1693,1706,1846,2029,2030,2045,2144,2199,2203,2368,2392,2393,2415,2416,2443,2444,2503,2666,2667,2684,2704,2705,2722,2761],"errorMessage":"Index access is out of bounds"},{"pc":[1240],"errorMessage":"Insufficient flux tier"},{"pc":[1171],"errorMessage":"Invalid quantity"},{"pc":[1607],"errorMessage":"Max stakers limit reached"},{"pc":[442],"errorMessage":"OnCompletion is not DeleteApplication"},{"pc":[364,373,389,401,413,454,485,507,525,543,583],"errorMessage":"OnCompletion is not NoOp"},{"pc":[1077],"errorMessage":"Only admin can delete application"},{"pc":[704],"errorMessage":"Only admin can init application"},{"pc":[904],"errorMessage":"Only admin can init storage"},{"pc":[999],"errorMessage":"Only admin can inject rewards"},{"pc":[848],"errorMessage":"Only admin can update admin address"},{"pc":[1613],"errorMessage":"Stake  failed"},{"pc":[1084],"errorMessage":"Staked assets still exist"},{"pc":[1182],"errorMessage":"application exists"},{"pc":[781,953,1044,1302],"errorMessage":"assert target is match for conditions"},{"pc":[587],"errorMessage":"can only call when creating"},{"pc":[367,376,392,404,416,445,457,488,510,528,546],"errorMessage":"can only call when not creating"},{"pc":[702,846,863,902,910,997,1008,1048,1075,1081,1093,1121,1126,1136,1176,1237,1285,1440,1512,1584,1601,1631,1639,1651,1658,1719,1780,1789,1802,1807,1831,1885,1890,1898,1920,1925,1994,2088,2167,2233,2283,2323,2381,2404,2427,2492,2571,2631],"errorMessage":"check GlobalState exists"},{"pc":[744],"errorMessage":"overflow"},{"pc":[895],"errorMessage":"staking pool already initialized"},{"pc":[427,468],"errorMessage":"transaction type is axfer"},{"pc":[498,564],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CyALAAEwrAK8BegHigWgjQa0ocoEtKADgICapuqv4wEmDgdzdGFrZXJzC251bV9zdGFrZXJzDHRvdGFsX3N0YWtlZBRpbmplY3RlZF9hc2FfcmV3YXJkcw9yZXdhcmRfYXNzZXRfaWQIAAAAAAAAAAANYWRtaW5fYWRkcmVzcw9zdGFrZWRfYXNzZXRfaWQEFR98dQMGgQEabGFzdF9yZXdhcmRfaW5qZWN0aW9uX3RpbWUSZmx1eF90aWVyX3JlcXVpcmVkD2ZsdXhfb3JhY2xlX2FwcDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxG0EAW4IMBNMkvqQElCAgZAQy23ptBExDZyYER8/MBAQ0cAfrBCSHwywE9OtKAwTqS8pXBKWua9EEgTzomgQxcsqdNhoAjgwA3QC1AKMAkQB7AFwATgAzACcAGwALAAIiQzEZFEQxGEQjQzEZFEQxGEQ2GgEXiAbpI0MxGRREMRhEiAaDI0MxGRREMRhEiAS7I0MxGRREMRhEMRYjCUk4EIEEEkQ2GgEXiALWI0MxGYEFEkQxGESIAmwjQzEZFEQxGEQxFiMJSTgQgQQSRDYaARc2GgIXiAH8I0MxGRREMRhEMRYjCUk4ECMSRIgBfyNDMRkURDEYRIgBVRYnCExQsCNDMRkURDEYRDYaARfAHIgBKyNDMRkURDEYRDYaARc2GgIXMRYjCUk4ECMSRDYaAxc2GgQXwDKIAHMjQzEZFEQxGBRENhoBiAA9I0OKAgCL/oEKCIsAMgwNQQAqsYEGshCBBbIZJwmyHicJsh+L/40CAAsABLNC/9syALIBQv/1IrIBQv/viYoBACcGi/9nggIQY29udHJhY3RfdmVyc2lvbggAAAAAAAALwmeJigUAMQAiJwZlRBJEi/sWJwdMZ4v8FicETGcqJwVnJwonBWcrJwVnKScFZ4v+FkmTgQgORFcHAScLTGcnDIv/Z4v9OAcyChJBAEKL/TgIgYCt4gQSQQA1I0SxMgoishKyFIv7shGBBLIQIQWyAbOL/Iv7E0EAFbEyCiKyErIUi/yyEYEEshAhBbIBs4kiQv/IigEAMQAiJwZlRBJEJwaL/2eJigABIkknBGVEF0EABCEHjAAhB4sACCEICCEJCEyJigEAgAAovUUBFEQxACInBmVEEkQiSScEZUQXQQAEIQeMASEHiwEIIQgIIQkIjACL/zgHMgoSQQAqi/84CIsAEkEAICNEKIHg8wG5SIsAFoAPbWluaW11bV9iYWxhbmNlTGeJIkL/3YoDADEAIicGZUQSRIv9OAAiJwZlRBJBADSL/TgUMgoSQQAqi/04EYv/EkEAIIv9OBKL/hJBABYjRCIrZUQXi/4IFitMZzIHFicKTGeJIkL/5zEAIicGZUQSRCIqZUQXFEQovEixIicHZUQXMgMyCrIUIrISshWyEYEEshAhBbIBsyInB2VEIicEZUQTQQAdsSInBGVEFzIDMgqyFCKyErIVshGBBLIQIQWyAbOJigIAIoAARwWL/0QiJwxlRElyCEUBRLEyCjEASYAE1NeqXLIashqyHEsBsjKyALIYgQayECEFsgGztD5JVwQATFcABCcIEkQXIicLZUQXD0QyDCUMQQAJMgwhBAgiiP1ri/44ADEAEkEBXIv+OBQyChJBAVKL/jgRIicHZUQXEkEBRIv+OBKL/xJBATojRCKMATIMJQxBAAkyDCEECCKI/SoijAIovkUBRIsCIQYMSYwEQQEOiwFAAQkovkSLAiQLSYwDJFhXACAxABJBAG4yDCUMQQAJMgwhBAgiiPztKL5EiwMkWEmBIFuL/jgSSYwFCBZcIIwAMgwlDEEACTIMIQQIIoj8xSi+RIsERIsDiwBdKEy/IiplRBeLBQgWKkxnI4wBMgwlDEEACTIMIQQIIoj8mIsCIwiMAkL/aCi+RIsDJFhXACAyAxJBAGkyDCUMQQAJMgwhBAgiiPxvIiplRBeL/jgSSYwGCBYqTGcyDCUMQQAJMgwhBAgiiPxOMQCLBhZQJwVQKL5EiwREiwNPAl0oTL8yDCUMQQAJMgwhBAgiiPwnIillRBcjCBYpTGcjjAFC/24iKWVEF4H0AwxEQv9hiwFEiSJC/sOKAAAiSYAARwYiK2VEF4ECCyIpZUQXDUEBUyIrZUyMAEQijAQiKWVEF4sEDUEBJjIMJQxBAAkyDCEECCKI+8IovkSLBCQLSYwFJFiBIFtBAJsovkSLBSRYSYwBgSBbSYwDIiplRBdMIQodTwKXjAgyDCUMQQAJMgwhBAgiiPuCiwAXSYwCQQBkiwKLCB0hCpdJjAdAAAMjjAeLB0mMBiIrZUQXDkEAXyIrZUQXiwYJFitMZyInBGVEIicHZUQSQQA0iwOLBklOAggWiwFMXCCMASIqZUQXCBYqTGcovkSLBCEGDESLBYsBXShMv4sEIwiMBEL/L4sBSYEoW4sGCBZcKIwBQv/VIicEZUQiJwdlRBJBADAiK2VEF4sGSU8CCYsDCBaLAUxcIIwBIiplRBciK2VEF08CTAkIFipMZysnBWdC/5eLAUmBKFuLBggWXCiMAUL/6DIHFoARbGFzdF9hY2NydWFsX3RpbWVMZ4mKAQGAACIiKWVEF4sBDUEAODIMJQxBAAkyDCEECCKI+nIovkSLASQLSYwAJFhXACCL/xJBAAoovkSLACRYjACJiwEjCIwBQv+9Jw2MAImKAAAxAIj/qkcCgShbSU8CTEEAJrEiJwRlRBcxADIKiwGyErIAshSyEYEEshAhBbIBs4sAJwVcKIwCiwKMADIMJQxBAAkyDCEECCKI+feLAElXACBMiAHXSImKAQAiRwaAAEcFIiIpZUQXiw0NQQG+MgwlDEEACTIMIQQIIoj5xSi+RIsNJAskWEmMBVcAIDEAEkEBK4sFgSBbSYwKQQAoiwqL/w9EIicHZUQXQAFIsYv/QAE9iwoxADIKsgCyB7III7IQIrIBs4sFSYEoW0mMC0yMBkEAJrEiJwRlRBcxADIKiwuyErIAshSyEYEEshAhBbIBs4sFJwVcKIwGiwaMBSIqZUQXjAyL/0AA4IsFgSBbiwxMCRYqTGcyDCUMQQAJMgwhBAgiiPkbi/9AAKmLBVcAICcNiAD2jAQiKWVEFyMJKL5ETCQLJFhXACCI/mKMAyIpZUQXIwkovkRMJAskWFcAIIwAIowHIillRBeLBw1BAF4ovkSLByQLJFhXACCLABJBAEOLB4wJMgwlDEEACTIMIQQIIoj4q4sDiw2IAQ5IiwSLCYgBBkgiKWVEFyMJFilMZ4sFSVcAIEyIAHBIiw0jCIwNQv6ciwcjCIwHQv+XIowJQv+yiwVJgSBbi/8JFlwgJwVcKIwFQv/Ii/9C/yCL/0L+wLEiJwdlRBeMCDEAjAEyCowCi/9AAByLCrISiwKyAIsBshSLCLIRgQSyECEFsgGzQv6fi/9C/+GJigIBgAAiIillRBeLAQ1BAGoyDCUMQQAJMgwhBAgiiPf1KL5EiwEkC0mMACRYVwAgi/4SQQAWKL5EiwEhBgxEiwCL/10oTL+L/4wAiSi+RIsAJFhXACAyAxJBABYovkSLASEGDESLAIv/XShMv4v/jACJiwEjCIwBQv+Li/+MAImKAgEovkSL/yEGDESL/yQLi/5dKEy/i/6J","clear":"C4EBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type MbrReturn = {
  mbrPayment: bigint
}


/**
 * Converts the ABI tuple representation of a mbrReturn to the struct representation
 */
export function MbrReturnFromTuple(abiTuple: [bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.mbrReturn, APP_SPEC.structs) as MbrReturn
}

/**
 * The argument types for the Irpfg contract
 */
export type IrpfgArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(address)void': {
      adminAddress: string
    }
    'initApplication(uint64,uint64,pay,uint64,application)void': {
      /**
       * - The asset ID of the token to be staked in the pool.
       */
      stakedAssetId: bigint | number
      /**
       * - The asset ID of the token to be distributed as rewards.
       */
      rewardAssetId: bigint | number
      /**
       * - The payment transaction providing the initial minimum balance for the contract.
       */
      initialBalanceTxn: AppMethodCallTransactionArgument
      fluxTierRequired: bigint | number
      fluxOracleApp: bigint
    }
    'updateAdminAddress(account)void': {
      adminAddress: Uint8Array | string
    }
    'getMBRForPoolCreation()(uint64)': Record<string, never>
    'initStorage(pay)void': {
      mbrPayment: AppMethodCallTransactionArgument
    }
    'injectRewards(axfer,uint64,uint64)void': {
      rewardTxn: AppMethodCallTransactionArgument
      quantity: bigint | number
      rewardAssetId: bigint | number
    }
    'deleteApplication()void': Record<string, never>
    'stake(axfer,uint64)void': {
      stakeTxn: AppMethodCallTransactionArgument
      quantity: bigint | number
    }
    'accrueRewards()void': Record<string, never>
    'claimRewards()void': Record<string, never>
    'unstake(uint64)void': {
      quantity: bigint | number
    }
    'gas()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(address)void': [adminAddress: string]
    'initApplication(uint64,uint64,pay,uint64,application)void': [stakedAssetId: bigint | number, rewardAssetId: bigint | number, initialBalanceTxn: AppMethodCallTransactionArgument, fluxTierRequired: bigint | number, fluxOracleApp: bigint]
    'updateAdminAddress(account)void': [adminAddress: Uint8Array | string]
    'getMBRForPoolCreation()(uint64)': []
    'initStorage(pay)void': [mbrPayment: AppMethodCallTransactionArgument]
    'injectRewards(axfer,uint64,uint64)void': [rewardTxn: AppMethodCallTransactionArgument, quantity: bigint | number, rewardAssetId: bigint | number]
    'deleteApplication()void': []
    'stake(axfer,uint64)void': [stakeTxn: AppMethodCallTransactionArgument, quantity: bigint | number]
    'accrueRewards()void': []
    'claimRewards()void': []
    'unstake(uint64)void': [quantity: bigint | number]
    'gas()void': []
  }
}

/**
 * The return type for each method
 */
export type IrpfgReturns = {
  'createApplication(address)void': void
  'initApplication(uint64,uint64,pay,uint64,application)void': void
  'updateAdminAddress(account)void': void
  'getMBRForPoolCreation()(uint64)': MbrReturn
  'initStorage(pay)void': void
  'injectRewards(axfer,uint64,uint64)void': void
  'deleteApplication()void': void
  'stake(axfer,uint64)void': void
  'accrueRewards()void': void
  'claimRewards()void': void
  'unstake(uint64)void': void
  'gas()void': void
}

/**
 * Defines the types of available calls and state of the Irpfg smart contract.
 */
export type IrpfgTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(address)void' | 'createApplication', {
      argsObj: IrpfgArgs['obj']['createApplication(address)void']
      argsTuple: IrpfgArgs['tuple']['createApplication(address)void']
      returns: IrpfgReturns['createApplication(address)void']
    }>
    & Record<'initApplication(uint64,uint64,pay,uint64,application)void' | 'initApplication', {
      argsObj: IrpfgArgs['obj']['initApplication(uint64,uint64,pay,uint64,application)void']
      argsTuple: IrpfgArgs['tuple']['initApplication(uint64,uint64,pay,uint64,application)void']
      returns: IrpfgReturns['initApplication(uint64,uint64,pay,uint64,application)void']
    }>
    & Record<'updateAdminAddress(account)void' | 'updateAdminAddress', {
      argsObj: IrpfgArgs['obj']['updateAdminAddress(account)void']
      argsTuple: IrpfgArgs['tuple']['updateAdminAddress(account)void']
      returns: IrpfgReturns['updateAdminAddress(account)void']
    }>
    & Record<'getMBRForPoolCreation()(uint64)' | 'getMBRForPoolCreation', {
      argsObj: IrpfgArgs['obj']['getMBRForPoolCreation()(uint64)']
      argsTuple: IrpfgArgs['tuple']['getMBRForPoolCreation()(uint64)']
      returns: IrpfgReturns['getMBRForPoolCreation()(uint64)']
    }>
    & Record<'initStorage(pay)void' | 'initStorage', {
      argsObj: IrpfgArgs['obj']['initStorage(pay)void']
      argsTuple: IrpfgArgs['tuple']['initStorage(pay)void']
      returns: IrpfgReturns['initStorage(pay)void']
    }>
    & Record<'injectRewards(axfer,uint64,uint64)void' | 'injectRewards', {
      argsObj: IrpfgArgs['obj']['injectRewards(axfer,uint64,uint64)void']
      argsTuple: IrpfgArgs['tuple']['injectRewards(axfer,uint64,uint64)void']
      returns: IrpfgReturns['injectRewards(axfer,uint64,uint64)void']
    }>
    & Record<'deleteApplication()void' | 'deleteApplication', {
      argsObj: IrpfgArgs['obj']['deleteApplication()void']
      argsTuple: IrpfgArgs['tuple']['deleteApplication()void']
      returns: IrpfgReturns['deleteApplication()void']
    }>
    & Record<'stake(axfer,uint64)void' | 'stake', {
      argsObj: IrpfgArgs['obj']['stake(axfer,uint64)void']
      argsTuple: IrpfgArgs['tuple']['stake(axfer,uint64)void']
      returns: IrpfgReturns['stake(axfer,uint64)void']
    }>
    & Record<'accrueRewards()void' | 'accrueRewards', {
      argsObj: IrpfgArgs['obj']['accrueRewards()void']
      argsTuple: IrpfgArgs['tuple']['accrueRewards()void']
      returns: IrpfgReturns['accrueRewards()void']
    }>
    & Record<'claimRewards()void' | 'claimRewards', {
      argsObj: IrpfgArgs['obj']['claimRewards()void']
      argsTuple: IrpfgArgs['tuple']['claimRewards()void']
      returns: IrpfgReturns['claimRewards()void']
    }>
    & Record<'unstake(uint64)void' | 'unstake', {
      argsObj: IrpfgArgs['obj']['unstake(uint64)void']
      argsTuple: IrpfgArgs['tuple']['unstake(uint64)void']
      returns: IrpfgReturns['unstake(uint64)void']
    }>
    & Record<'gas()void' | 'gas', {
      argsObj: IrpfgArgs['obj']['gas()void']
      argsTuple: IrpfgArgs['tuple']['gas()void']
      returns: IrpfgReturns['gas()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        stakedAssetId: bigint
        rewardAssetId: bigint
        totalStaked: bigint
        injectedAsaRewards: bigint
        lastRewardInjectionTime: bigint
        lastAccrualTime: bigint
        adminAddress: string
        minimumBalance: bigint
        numStakers: bigint
        contractVersion: bigint
        fluxTierRequired: number
        fluxOracleApp: bigint
      }
      maps: {}
    }
    box: {
      keys: {
        stakers: [[string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint]]
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type IrpfgSignatures = keyof IrpfgTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type IrpfgNonVoidMethodSignatures = keyof IrpfgTypes['methods'] extends infer T ? T extends keyof IrpfgTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Irpfg smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends IrpfgSignatures> = IrpfgTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Irpfg smart contract to the method's return type
 */
export type MethodReturn<TSignature extends IrpfgSignatures> = IrpfgTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = IrpfgTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = IrpfgTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type IrpfgCreateCallParams =
  | Expand<CallParams<IrpfgArgs['obj']['createApplication(address)void'] | IrpfgArgs['tuple']['createApplication(address)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<IrpfgArgs['obj']['createApplication(address)void'] | IrpfgArgs['tuple']['createApplication(address)void']> & {method: 'createApplication(address)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported delete method params for this smart contract
 */
export type IrpfgDeleteCallParams =
  | Expand<CallParams<IrpfgArgs['obj']['deleteApplication()void'] | IrpfgArgs['tuple']['deleteApplication()void']> & {method: 'deleteApplication'}>
  | Expand<CallParams<IrpfgArgs['obj']['deleteApplication()void'] | IrpfgArgs['tuple']['deleteApplication()void']> & {method: 'deleteApplication()void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type IrpfgDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: IrpfgCreateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: IrpfgDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Irpfg smart contract
 */
export abstract class IrpfgParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends IrpfgCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(address)void':
            return IrpfgParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the irpfg smart contract using the createApplication(address)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<IrpfgArgs['obj']['createApplication(address)void'] | IrpfgArgs['tuple']['createApplication(address)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(address)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.adminAddress],
        }
      },
    }
  }

  /**
   * Gets available delete ABI call param factories
   */
  static get delete() {
    return {
      _resolveByMethod<TParams extends IrpfgDeleteCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'deleteApplication':
          case 'deleteApplication()void':
            return IrpfgParamsFactory.delete.deleteApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs delete ABI call params for the irpfg smart contract using the deleteApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      deleteApplication(params: CallParams<IrpfgArgs['obj']['deleteApplication()void'] | IrpfgArgs['tuple']['deleteApplication()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'deleteApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the initApplication(uint64,uint64,pay,uint64,application)void ABI method
   *
  * Initializes the staking pool application with the specified staked asset and reward asset.
  
  Sets up global state variables, verifies the initial funding payment, and opts the contract into the staked asset
  and reward asset if necesary.
  Only the admin address can call this function.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initApplication(params: CallParams<IrpfgArgs['obj']['initApplication(uint64,uint64,pay,uint64,application)void'] | IrpfgArgs['tuple']['initApplication(uint64,uint64,pay,uint64,application)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initApplication(uint64,uint64,pay,uint64,application)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.stakedAssetId, params.args.rewardAssetId, params.args.initialBalanceTxn, params.args.fluxTierRequired, params.args.fluxOracleApp],
    }
  }
  /**
   * Constructs a no op call for the updateAdminAddress(account)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateAdminAddress(params: CallParams<IrpfgArgs['obj']['updateAdminAddress(account)void'] | IrpfgArgs['tuple']['updateAdminAddress(account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateAdminAddress(account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.adminAddress],
    }
  }
  /**
   * Constructs a no op call for the getMBRForPoolCreation()(uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getMbrForPoolCreation(params: CallParams<IrpfgArgs['obj']['getMBRForPoolCreation()(uint64)'] | IrpfgArgs['tuple']['getMBRForPoolCreation()(uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getMBRForPoolCreation()(uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the initStorage(pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initStorage(params: CallParams<IrpfgArgs['obj']['initStorage(pay)void'] | IrpfgArgs['tuple']['initStorage(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initStorage(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.mbrPayment],
    }
  }
  /**
   * Constructs a no op call for the injectRewards(axfer,uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static injectRewards(params: CallParams<IrpfgArgs['obj']['injectRewards(axfer,uint64,uint64)void'] | IrpfgArgs['tuple']['injectRewards(axfer,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'injectRewards(axfer,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.rewardTxn, params.args.quantity, params.args.rewardAssetId],
    }
  }
  /**
   * Constructs a no op call for the stake(axfer,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static stake(params: CallParams<IrpfgArgs['obj']['stake(axfer,uint64)void'] | IrpfgArgs['tuple']['stake(axfer,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'stake(axfer,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.stakeTxn, params.args.quantity],
    }
  }
  /**
   * Constructs a no op call for the accrueRewards()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static accrueRewards(params: CallParams<IrpfgArgs['obj']['accrueRewards()void'] | IrpfgArgs['tuple']['accrueRewards()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'accrueRewards()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the claimRewards()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static claimRewards(params: CallParams<IrpfgArgs['obj']['claimRewards()void'] | IrpfgArgs['tuple']['claimRewards()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'claimRewards()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the unstake(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static unstake(params: CallParams<IrpfgArgs['obj']['unstake(uint64)void'] | IrpfgArgs['tuple']['unstake(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'unstake(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.quantity],
    }
  }
  /**
   * Constructs a no op call for the gas()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static gas(params: CallParams<IrpfgArgs['obj']['gas()void'] | IrpfgArgs['tuple']['gas()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'gas()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the irpfg smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class IrpfgFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `IrpfgFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new IrpfgClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new IrpfgClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the irpfg smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: IrpfgDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? IrpfgParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (IrpfgCreateCallParams & { args: Uint8Array[] }) : undefined,
      deleteParams: params.deleteParams?.method ? IrpfgParamsFactory.delete._resolveByMethod(params.deleteParams) : params.deleteParams ? params.deleteParams as (IrpfgDeleteCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new IrpfgClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the irpfg smart contract using the createApplication(address)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<IrpfgArgs['obj']['createApplication(address)void'] | IrpfgArgs['tuple']['createApplication(address)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(IrpfgParamsFactory.create.createApplication(params))
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the irpfg smart contract using the deleteApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      deleteApplication: (params: CallParams<IrpfgArgs['obj']['deleteApplication()void'] | IrpfgArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appFactory.params.deployDelete(IrpfgParamsFactory.delete.deleteApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the irpfg smart contract using the createApplication(address)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<IrpfgArgs['obj']['createApplication(address)void'] | IrpfgArgs['tuple']['createApplication(address)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(IrpfgParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the irpfg smart contract using an ABI method call using the createApplication(address)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<IrpfgArgs['obj']['createApplication(address)void'] | IrpfgArgs['tuple']['createApplication(address)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(IrpfgParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | IrpfgReturns['createApplication(address)void']) }, appClient: new IrpfgClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the irpfg smart contract
 */
export class IrpfgClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `IrpfgClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Irpfg app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `IrpfgClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends IrpfgNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `IrpfgClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<IrpfgClient> {
    return new IrpfgClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `IrpfgClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<IrpfgClient> {
    return new IrpfgClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the irpfg smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      deleteApplication: (params: CallParams<IrpfgArgs['obj']['deleteApplication()void'] | IrpfgArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appClient.params.delete(IrpfgParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the irpfg smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the irpfg smart contract using the `initApplication(uint64,uint64,pay,uint64,application)void` ABI method.
     *
    * Initializes the staking pool application with the specified staked asset and reward asset.
    
    Sets up global state variables, verifies the initial funding payment, and opts the contract into the staked asset
    and reward asset if necesary.
    Only the admin address can call this function.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initApplication: (params: CallParams<IrpfgArgs['obj']['initApplication(uint64,uint64,pay,uint64,application)void'] | IrpfgArgs['tuple']['initApplication(uint64,uint64,pay,uint64,application)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(IrpfgParamsFactory.initApplication(params))
    },

    /**
     * Makes a call to the irpfg smart contract using the `updateAdminAddress(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateAdminAddress: (params: CallParams<IrpfgArgs['obj']['updateAdminAddress(account)void'] | IrpfgArgs['tuple']['updateAdminAddress(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(IrpfgParamsFactory.updateAdminAddress(params))
    },

    /**
     * Makes a call to the irpfg smart contract using the `getMBRForPoolCreation()(uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getMbrForPoolCreation: (params: CallParams<IrpfgArgs['obj']['getMBRForPoolCreation()(uint64)'] | IrpfgArgs['tuple']['getMBRForPoolCreation()(uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(IrpfgParamsFactory.getMbrForPoolCreation(params))
    },

    /**
     * Makes a call to the irpfg smart contract using the `initStorage(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initStorage: (params: CallParams<IrpfgArgs['obj']['initStorage(pay)void'] | IrpfgArgs['tuple']['initStorage(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(IrpfgParamsFactory.initStorage(params))
    },

    /**
     * Makes a call to the irpfg smart contract using the `injectRewards(axfer,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    injectRewards: (params: CallParams<IrpfgArgs['obj']['injectRewards(axfer,uint64,uint64)void'] | IrpfgArgs['tuple']['injectRewards(axfer,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(IrpfgParamsFactory.injectRewards(params))
    },

    /**
     * Makes a call to the irpfg smart contract using the `stake(axfer,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    stake: (params: CallParams<IrpfgArgs['obj']['stake(axfer,uint64)void'] | IrpfgArgs['tuple']['stake(axfer,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(IrpfgParamsFactory.stake(params))
    },

    /**
     * Makes a call to the irpfg smart contract using the `accrueRewards()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    accrueRewards: (params: CallParams<IrpfgArgs['obj']['accrueRewards()void'] | IrpfgArgs['tuple']['accrueRewards()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(IrpfgParamsFactory.accrueRewards(params))
    },

    /**
     * Makes a call to the irpfg smart contract using the `claimRewards()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    claimRewards: (params: CallParams<IrpfgArgs['obj']['claimRewards()void'] | IrpfgArgs['tuple']['claimRewards()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(IrpfgParamsFactory.claimRewards(params))
    },

    /**
     * Makes a call to the irpfg smart contract using the `unstake(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    unstake: (params: CallParams<IrpfgArgs['obj']['unstake(uint64)void'] | IrpfgArgs['tuple']['unstake(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(IrpfgParamsFactory.unstake(params))
    },

    /**
     * Makes a call to the irpfg smart contract using the `gas()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    gas: (params: CallParams<IrpfgArgs['obj']['gas()void'] | IrpfgArgs['tuple']['gas()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(IrpfgParamsFactory.gas(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the irpfg smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      deleteApplication: (params: CallParams<IrpfgArgs['obj']['deleteApplication()void'] | IrpfgArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appClient.createTransaction.delete(IrpfgParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the irpfg smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the irpfg smart contract using the `initApplication(uint64,uint64,pay,uint64,application)void` ABI method.
     *
    * Initializes the staking pool application with the specified staked asset and reward asset.
    
    Sets up global state variables, verifies the initial funding payment, and opts the contract into the staked asset
    and reward asset if necesary.
    Only the admin address can call this function.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initApplication: (params: CallParams<IrpfgArgs['obj']['initApplication(uint64,uint64,pay,uint64,application)void'] | IrpfgArgs['tuple']['initApplication(uint64,uint64,pay,uint64,application)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(IrpfgParamsFactory.initApplication(params))
    },

    /**
     * Makes a call to the irpfg smart contract using the `updateAdminAddress(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateAdminAddress: (params: CallParams<IrpfgArgs['obj']['updateAdminAddress(account)void'] | IrpfgArgs['tuple']['updateAdminAddress(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(IrpfgParamsFactory.updateAdminAddress(params))
    },

    /**
     * Makes a call to the irpfg smart contract using the `getMBRForPoolCreation()(uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getMbrForPoolCreation: (params: CallParams<IrpfgArgs['obj']['getMBRForPoolCreation()(uint64)'] | IrpfgArgs['tuple']['getMBRForPoolCreation()(uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(IrpfgParamsFactory.getMbrForPoolCreation(params))
    },

    /**
     * Makes a call to the irpfg smart contract using the `initStorage(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initStorage: (params: CallParams<IrpfgArgs['obj']['initStorage(pay)void'] | IrpfgArgs['tuple']['initStorage(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(IrpfgParamsFactory.initStorage(params))
    },

    /**
     * Makes a call to the irpfg smart contract using the `injectRewards(axfer,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    injectRewards: (params: CallParams<IrpfgArgs['obj']['injectRewards(axfer,uint64,uint64)void'] | IrpfgArgs['tuple']['injectRewards(axfer,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(IrpfgParamsFactory.injectRewards(params))
    },

    /**
     * Makes a call to the irpfg smart contract using the `stake(axfer,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    stake: (params: CallParams<IrpfgArgs['obj']['stake(axfer,uint64)void'] | IrpfgArgs['tuple']['stake(axfer,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(IrpfgParamsFactory.stake(params))
    },

    /**
     * Makes a call to the irpfg smart contract using the `accrueRewards()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    accrueRewards: (params: CallParams<IrpfgArgs['obj']['accrueRewards()void'] | IrpfgArgs['tuple']['accrueRewards()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(IrpfgParamsFactory.accrueRewards(params))
    },

    /**
     * Makes a call to the irpfg smart contract using the `claimRewards()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    claimRewards: (params: CallParams<IrpfgArgs['obj']['claimRewards()void'] | IrpfgArgs['tuple']['claimRewards()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(IrpfgParamsFactory.claimRewards(params))
    },

    /**
     * Makes a call to the irpfg smart contract using the `unstake(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    unstake: (params: CallParams<IrpfgArgs['obj']['unstake(uint64)void'] | IrpfgArgs['tuple']['unstake(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(IrpfgParamsFactory.unstake(params))
    },

    /**
     * Makes a call to the irpfg smart contract using the `gas()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    gas: (params: CallParams<IrpfgArgs['obj']['gas()void'] | IrpfgArgs['tuple']['gas()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(IrpfgParamsFactory.gas(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the irpfg smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      deleteApplication: async (params: CallParams<IrpfgArgs['obj']['deleteApplication()void'] | IrpfgArgs['tuple']['deleteApplication()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.delete(IrpfgParamsFactory.delete.deleteApplication(params))
        return {...result, return: result.return as unknown as (undefined | IrpfgReturns['deleteApplication()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the irpfg smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the irpfg smart contract using the `initApplication(uint64,uint64,pay,uint64,application)void` ABI method.
     *
    * Initializes the staking pool application with the specified staked asset and reward asset.
    
    Sets up global state variables, verifies the initial funding payment, and opts the contract into the staked asset
    and reward asset if necesary.
    Only the admin address can call this function.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initApplication: async (params: CallParams<IrpfgArgs['obj']['initApplication(uint64,uint64,pay,uint64,application)void'] | IrpfgArgs['tuple']['initApplication(uint64,uint64,pay,uint64,application)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(IrpfgParamsFactory.initApplication(params))
      return {...result, return: result.return as unknown as (undefined | IrpfgReturns['initApplication(uint64,uint64,pay,uint64,application)void'])}
    },

    /**
     * Makes a call to the irpfg smart contract using the `updateAdminAddress(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateAdminAddress: async (params: CallParams<IrpfgArgs['obj']['updateAdminAddress(account)void'] | IrpfgArgs['tuple']['updateAdminAddress(account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(IrpfgParamsFactory.updateAdminAddress(params))
      return {...result, return: result.return as unknown as (undefined | IrpfgReturns['updateAdminAddress(account)void'])}
    },

    /**
     * Makes a call to the irpfg smart contract using the `getMBRForPoolCreation()(uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getMbrForPoolCreation: async (params: CallParams<IrpfgArgs['obj']['getMBRForPoolCreation()(uint64)'] | IrpfgArgs['tuple']['getMBRForPoolCreation()(uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(IrpfgParamsFactory.getMbrForPoolCreation(params))
      return {...result, return: result.return as unknown as (undefined | IrpfgReturns['getMBRForPoolCreation()(uint64)'])}
    },

    /**
     * Makes a call to the irpfg smart contract using the `initStorage(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initStorage: async (params: CallParams<IrpfgArgs['obj']['initStorage(pay)void'] | IrpfgArgs['tuple']['initStorage(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(IrpfgParamsFactory.initStorage(params))
      return {...result, return: result.return as unknown as (undefined | IrpfgReturns['initStorage(pay)void'])}
    },

    /**
     * Makes a call to the irpfg smart contract using the `injectRewards(axfer,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    injectRewards: async (params: CallParams<IrpfgArgs['obj']['injectRewards(axfer,uint64,uint64)void'] | IrpfgArgs['tuple']['injectRewards(axfer,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(IrpfgParamsFactory.injectRewards(params))
      return {...result, return: result.return as unknown as (undefined | IrpfgReturns['injectRewards(axfer,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the irpfg smart contract using the `stake(axfer,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    stake: async (params: CallParams<IrpfgArgs['obj']['stake(axfer,uint64)void'] | IrpfgArgs['tuple']['stake(axfer,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(IrpfgParamsFactory.stake(params))
      return {...result, return: result.return as unknown as (undefined | IrpfgReturns['stake(axfer,uint64)void'])}
    },

    /**
     * Makes a call to the irpfg smart contract using the `accrueRewards()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    accrueRewards: async (params: CallParams<IrpfgArgs['obj']['accrueRewards()void'] | IrpfgArgs['tuple']['accrueRewards()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(IrpfgParamsFactory.accrueRewards(params))
      return {...result, return: result.return as unknown as (undefined | IrpfgReturns['accrueRewards()void'])}
    },

    /**
     * Makes a call to the irpfg smart contract using the `claimRewards()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    claimRewards: async (params: CallParams<IrpfgArgs['obj']['claimRewards()void'] | IrpfgArgs['tuple']['claimRewards()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(IrpfgParamsFactory.claimRewards(params))
      return {...result, return: result.return as unknown as (undefined | IrpfgReturns['claimRewards()void'])}
    },

    /**
     * Makes a call to the irpfg smart contract using the `unstake(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    unstake: async (params: CallParams<IrpfgArgs['obj']['unstake(uint64)void'] | IrpfgArgs['tuple']['unstake(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(IrpfgParamsFactory.unstake(params))
      return {...result, return: result.return as unknown as (undefined | IrpfgReturns['unstake(uint64)void'])}
    },

    /**
     * Makes a call to the irpfg smart contract using the `gas()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    gas: async (params: CallParams<IrpfgArgs['obj']['gas()void'] | IrpfgArgs['tuple']['gas()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(IrpfgParamsFactory.gas(params))
      return {...result, return: result.return as unknown as (undefined | IrpfgReturns['gas()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new IrpfgClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current irpfg app
   */
  state = {
    /**
     * Methods to access global state for the current irpfg app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          stakedAssetId: result.staked_asset_id,
          rewardAssetId: result.reward_asset_id,
          totalStaked: result.total_staked,
          injectedAsaRewards: result.injected_asa_rewards,
          lastRewardInjectionTime: result.last_reward_injection_time,
          lastAccrualTime: result.last_accrual_time,
          adminAddress: result.admin_address,
          minimumBalance: result.minimum_balance,
          numStakers: result.num_stakers,
          contractVersion: result.contract_version,
          fluxTierRequired: result.flux_tier_required,
          fluxOracleApp: result.flux_oracle_app,
        }
      },
      /**
       * Get the current value of the staked_asset_id key in global state
       */
      stakedAssetId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("staked_asset_id")) as bigint | undefined },
      /**
       * Get the current value of the reward_asset_id key in global state
       */
      rewardAssetId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("reward_asset_id")) as bigint | undefined },
      /**
       * Get the current value of the total_staked key in global state
       */
      totalStaked: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_staked")) as bigint | undefined },
      /**
       * Get the current value of the injected_asa_rewards key in global state
       */
      injectedAsaRewards: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("injected_asa_rewards")) as bigint | undefined },
      /**
       * Get the current value of the last_reward_injection_time key in global state
       */
      lastRewardInjectionTime: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("last_reward_injection_time")) as bigint | undefined },
      /**
       * Get the current value of the last_accrual_time key in global state
       */
      lastAccrualTime: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("last_accrual_time")) as bigint | undefined },
      /**
       * Get the current value of the admin_address key in global state
       */
      adminAddress: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("admin_address")) as string | undefined },
      /**
       * Get the current value of the minimum_balance key in global state
       */
      minimumBalance: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("minimum_balance")) as bigint | undefined },
      /**
       * Get the current value of the num_stakers key in global state
       */
      numStakers: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("num_stakers")) as bigint | undefined },
      /**
       * Get the current value of the contract_version key in global state
       */
      contractVersion: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("contract_version")) as bigint | undefined },
      /**
       * Get the current value of the flux_tier_required key in global state
       */
      fluxTierRequired: async (): Promise<number | undefined> => { return (await this.appClient.state.global.getValue("flux_tier_required")) as number | undefined },
      /**
       * Get the current value of the flux_oracle_app key in global state
       */
      fluxOracleApp: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("flux_oracle_app")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current irpfg app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
          stakers: result.stakers,
        }
      },
      /**
       * Get the current value of the stakers key in box state
       */
      stakers: async (): Promise<[[string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint]] | undefined> => { return (await this.appClient.state.box.getValue("stakers")) as [[string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint], [string, bigint, bigint]] | undefined },
    },
  }

  public newGroup(): IrpfgComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a initApplication(uint64,uint64,pay,uint64,application)void method call against the irpfg contract
       */
      initApplication(params: CallParams<IrpfgArgs['obj']['initApplication(uint64,uint64,pay,uint64,application)void'] | IrpfgArgs['tuple']['initApplication(uint64,uint64,pay,uint64,application)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initApplication(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a updateAdminAddress(account)void method call against the irpfg contract
       */
      updateAdminAddress(params: CallParams<IrpfgArgs['obj']['updateAdminAddress(account)void'] | IrpfgArgs['tuple']['updateAdminAddress(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateAdminAddress(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getMBRForPoolCreation()(uint64) method call against the irpfg contract
       */
      getMbrForPoolCreation(params: CallParams<IrpfgArgs['obj']['getMBRForPoolCreation()(uint64)'] | IrpfgArgs['tuple']['getMBRForPoolCreation()(uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getMbrForPoolCreation(params)))
        resultMappers.push((v) => client.decodeReturnValue('getMBRForPoolCreation()(uint64)', v))
        return this
      },
      /**
       * Add a initStorage(pay)void method call against the irpfg contract
       */
      initStorage(params: CallParams<IrpfgArgs['obj']['initStorage(pay)void'] | IrpfgArgs['tuple']['initStorage(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initStorage(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a injectRewards(axfer,uint64,uint64)void method call against the irpfg contract
       */
      injectRewards(params: CallParams<IrpfgArgs['obj']['injectRewards(axfer,uint64,uint64)void'] | IrpfgArgs['tuple']['injectRewards(axfer,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.injectRewards(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a stake(axfer,uint64)void method call against the irpfg contract
       */
      stake(params: CallParams<IrpfgArgs['obj']['stake(axfer,uint64)void'] | IrpfgArgs['tuple']['stake(axfer,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.stake(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a accrueRewards()void method call against the irpfg contract
       */
      accrueRewards(params: CallParams<IrpfgArgs['obj']['accrueRewards()void'] | IrpfgArgs['tuple']['accrueRewards()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.accrueRewards(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a claimRewards()void method call against the irpfg contract
       */
      claimRewards(params: CallParams<IrpfgArgs['obj']['claimRewards()void'] | IrpfgArgs['tuple']['claimRewards()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.claimRewards(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a unstake(uint64)void method call against the irpfg contract
       */
      unstake(params: CallParams<IrpfgArgs['obj']['unstake(uint64)void'] | IrpfgArgs['tuple']['unstake(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.unstake(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a gas()void method call against the irpfg contract
       */
      gas(params: CallParams<IrpfgArgs['obj']['gas()void'] | IrpfgArgs['tuple']['gas()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.gas(params)))
        resultMappers.push(undefined)
        return this
      },
      get delete() {
        return {
          deleteApplication: (params: CallParams<IrpfgArgs['obj']['deleteApplication()void'] | IrpfgArgs['tuple']['deleteApplication()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.deleteApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the irpfg contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as IrpfgComposer
  }
}
export type IrpfgComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the initApplication(uint64,uint64,pay,uint64,application)void ABI method.
   *
  * Initializes the staking pool application with the specified staked asset and reward asset.
  
  Sets up global state variables, verifies the initial funding payment, and opts the contract into the staked asset
  and reward asset if necesary.
  Only the admin address can call this function.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initApplication(params?: CallParams<IrpfgArgs['obj']['initApplication(uint64,uint64,pay,uint64,application)void'] | IrpfgArgs['tuple']['initApplication(uint64,uint64,pay,uint64,application)void']>): IrpfgComposer<[...TReturns, IrpfgReturns['initApplication(uint64,uint64,pay,uint64,application)void'] | undefined]>

  /**
   * Calls the updateAdminAddress(account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateAdminAddress(params?: CallParams<IrpfgArgs['obj']['updateAdminAddress(account)void'] | IrpfgArgs['tuple']['updateAdminAddress(account)void']>): IrpfgComposer<[...TReturns, IrpfgReturns['updateAdminAddress(account)void'] | undefined]>

  /**
   * Calls the getMBRForPoolCreation()(uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getMbrForPoolCreation(params?: CallParams<IrpfgArgs['obj']['getMBRForPoolCreation()(uint64)'] | IrpfgArgs['tuple']['getMBRForPoolCreation()(uint64)']>): IrpfgComposer<[...TReturns, IrpfgReturns['getMBRForPoolCreation()(uint64)'] | undefined]>

  /**
   * Calls the initStorage(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initStorage(params?: CallParams<IrpfgArgs['obj']['initStorage(pay)void'] | IrpfgArgs['tuple']['initStorage(pay)void']>): IrpfgComposer<[...TReturns, IrpfgReturns['initStorage(pay)void'] | undefined]>

  /**
   * Calls the injectRewards(axfer,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  injectRewards(params?: CallParams<IrpfgArgs['obj']['injectRewards(axfer,uint64,uint64)void'] | IrpfgArgs['tuple']['injectRewards(axfer,uint64,uint64)void']>): IrpfgComposer<[...TReturns, IrpfgReturns['injectRewards(axfer,uint64,uint64)void'] | undefined]>

  /**
   * Calls the stake(axfer,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  stake(params?: CallParams<IrpfgArgs['obj']['stake(axfer,uint64)void'] | IrpfgArgs['tuple']['stake(axfer,uint64)void']>): IrpfgComposer<[...TReturns, IrpfgReturns['stake(axfer,uint64)void'] | undefined]>

  /**
   * Calls the accrueRewards()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  accrueRewards(params?: CallParams<IrpfgArgs['obj']['accrueRewards()void'] | IrpfgArgs['tuple']['accrueRewards()void']>): IrpfgComposer<[...TReturns, IrpfgReturns['accrueRewards()void'] | undefined]>

  /**
   * Calls the claimRewards()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimRewards(params?: CallParams<IrpfgArgs['obj']['claimRewards()void'] | IrpfgArgs['tuple']['claimRewards()void']>): IrpfgComposer<[...TReturns, IrpfgReturns['claimRewards()void'] | undefined]>

  /**
   * Calls the unstake(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  unstake(params?: CallParams<IrpfgArgs['obj']['unstake(uint64)void'] | IrpfgArgs['tuple']['unstake(uint64)void']>): IrpfgComposer<[...TReturns, IrpfgReturns['unstake(uint64)void'] | undefined]>

  /**
   * Calls the gas()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  gas(params?: CallParams<IrpfgArgs['obj']['gas()void'] | IrpfgArgs['tuple']['gas()void']>): IrpfgComposer<[...TReturns, IrpfgReturns['gas()void'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the irpfg smart contract using the deleteApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(params?: CallParams<IrpfgArgs['obj']['deleteApplication()void'] | IrpfgArgs['tuple']['deleteApplication()void']>): IrpfgComposer<[...TReturns, IrpfgReturns['deleteApplication()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the irpfg smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): IrpfgComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): IrpfgComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<IrpfgComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<IrpfgComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<IrpfgComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<IrpfgComposerResults<TReturns>>
}
export type IrpfgComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

